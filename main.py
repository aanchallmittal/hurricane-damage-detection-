{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":742001,"sourceType":"datasetVersion","datasetId":383256}],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, AveragePooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.utils import plot_model\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_kg_hide-output":true,"scrolled":true,"execution":{"iopub.status.busy":"2024-04-22T00:50:11.772245Z","iopub.execute_input":"2024-04-22T00:50:11.772553Z","iopub.status.idle":"2024-04-22T00:50:50.024321Z","shell.execute_reply.started":"2024-04-22T00:50:11.772529Z","shell.execute_reply":"2024-04-22T00:50:50.023163Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"img = cv2.imread('/kaggle/input/satellite-images-of-hurricane-damage/train_another/damage/-93.55964_30.895018.jpeg')\nplt.title('Damaged')\nplt.imshow(img)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:50:50.026425Z","iopub.execute_input":"2024-04-22T00:50:50.027443Z","iopub.status.idle":"2024-04-22T00:50:50.446937Z","shell.execute_reply.started":"2024-04-22T00:50:50.027407Z","shell.execute_reply":"2024-04-22T00:50:50.446080Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"img.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:50:50.448088Z","iopub.execute_input":"2024-04-22T00:50:50.448437Z","iopub.status.idle":"2024-04-22T00:50:50.454667Z","shell.execute_reply.started":"2024-04-22T00:50:50.448405Z","shell.execute_reply":"2024-04-22T00:50:50.453795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"img = cv2.imread('/kaggle/input/satellite-images-of-hurricane-damage/train_another/no_damage/-95.061275_29.831535.jpeg')\nplt.title('Undamaged')\nplt.imshow(img)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:50:50.457323Z","iopub.execute_input":"2024-04-22T00:50:50.457642Z","iopub.status.idle":"2024-04-22T00:50:50.796894Z","shell.execute_reply.started":"2024-04-22T00:50:50.457612Z","shell.execute_reply":"2024-04-22T00:50:50.796035Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_another_dir = '/kaggle/input/satellite-images-of-hurricane-damage/test_another'\ntrain_another_dir = '/kaggle/input/satellite-images-of-hurricane-damage/train_another'\ntest_dir = '/kaggle/input/satellite-images-of-hurricane-damage/test'\nval_dir = '/kaggle/input/satellite-images-of-hurricane-damage/validation_another'\nimg_width = 100\nimg_height = 100","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:50:50.798013Z","iopub.execute_input":"2024-04-22T00:50:50.798304Z","iopub.status.idle":"2024-04-22T00:50:50.803019Z","shell.execute_reply.started":"2024-04-22T00:50:50.798278Z","shell.execute_reply":"2024-04-22T00:50:50.801915Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Preparing the Train Data","metadata":{}},{"cell_type":"code","source":"categories = ['damage', 'no_damage']\n\n# Now we get the images using complete path and store the images into img_data folder.\nimg_data = []\nfor cata in categories:\n    folder = os.path.join(test_another_dir, cata)\n    label = categories.index(cata)\n    for img in os.listdir(folder):\n        img_path = os.path.join(folder, img)\n\n        try:\n            # Attempt to read and resize the image\n            img_array = cv2.imread(img_path)\n            img_array = cv2.resize(img_array, (img_height, img_width))\n\n            # Check if the image array is not empty\n            if img_array is not None and not img_array.size == 0:\n                img_data.append([img_array, label])\n\n        except Exception as e:\n            continue","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:50:50.804171Z","iopub.execute_input":"2024-04-22T00:50:50.804444Z","iopub.status.idle":"2024-04-22T00:51:45.835357Z","shell.execute_reply.started":"2024-04-22T00:50:50.804420Z","shell.execute_reply":"2024-04-22T00:51:45.834552Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categories = ['damage', 'no_damage']\n\n# Now we get the images using complete path and store the images into img_data folder.\nfor cata in categories:\n    folder = os.path.join(train_another_dir, cata)\n    label = categories.index(cata)\n    for img in os.listdir(folder):\n        img_path = os.path.join(folder, img)\n\n        try:\n            # Attempt to read and resize the image\n            img_array = cv2.imread(img_path)\n            img_array = cv2.resize(img_array, (img_height, img_width))\n\n            # Check if the image array is not empty\n            if img_array is not None and not img_array.size == 0:\n                img_data.append([img_array, label])\n\n        except Exception as e:\n            continue","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:51:45.836486Z","iopub.execute_input":"2024-04-22T00:51:45.836792Z","iopub.status.idle":"2024-04-22T00:52:49.595136Z","shell.execute_reply.started":"2024-04-22T00:51:45.836766Z","shell.execute_reply":"2024-04-22T00:52:49.594198Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"random.shuffle(img_data)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:52:49.596498Z","iopub.execute_input":"2024-04-22T00:52:49.596930Z","iopub.status.idle":"2024-04-22T00:52:49.618265Z","shell.execute_reply.started":"2024-04-22T00:52:49.596896Z","shell.execute_reply":"2024-04-22T00:52:49.617174Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x = []\ny_t = []\nfor features,labels in img_data:\n    x.append(features)\n    y_t.append(labels)\n    \n#Convert X and Y list into array\nx_train = np.array(x, dtype = float)\ny_train = np.array(y_t)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:52:49.619491Z","iopub.execute_input":"2024-04-22T00:52:49.619763Z","iopub.status.idle":"2024-04-22T00:52:50.757038Z","shell.execute_reply.started":"2024-04-22T00:52:49.619739Z","shell.execute_reply":"2024-04-22T00:52:50.756161Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:52:50.760915Z","iopub.execute_input":"2024-04-22T00:52:50.761253Z","iopub.status.idle":"2024-04-22T00:52:50.767661Z","shell.execute_reply.started":"2024-04-22T00:52:50.761224Z","shell.execute_reply":"2024-04-22T00:52:50.766559Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:52:50.768892Z","iopub.execute_input":"2024-04-22T00:52:50.769260Z","iopub.status.idle":"2024-04-22T00:52:50.782199Z","shell.execute_reply.started":"2024-04-22T00:52:50.769221Z","shell.execute_reply":"2024-04-22T00:52:50.781062Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train[10]","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:52:50.783305Z","iopub.execute_input":"2024-04-22T00:52:50.783647Z","iopub.status.idle":"2024-04-22T00:52:50.798215Z","shell.execute_reply.started":"2024-04-22T00:52:50.783620Z","shell.execute_reply":"2024-04-22T00:52:50.797295Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.imshow(x_train[10])","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:52:50.799430Z","iopub.execute_input":"2024-04-22T00:52:50.799792Z","iopub.status.idle":"2024-04-22T00:52:51.096873Z","shell.execute_reply.started":"2024-04-22T00:52:50.799756Z","shell.execute_reply":"2024-04-22T00:52:51.095715Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Normalizing the values","metadata":{}},{"cell_type":"code","source":"for i in range(len(x_train)):\n    x_train[i] /= 255","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:52:51.098727Z","iopub.execute_input":"2024-04-22T00:52:51.099151Z","iopub.status.idle":"2024-04-22T00:52:51.686018Z","shell.execute_reply.started":"2024-04-22T00:52:51.099095Z","shell.execute_reply":"2024-04-22T00:52:51.685045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.imshow(x_train[10])","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:52:51.687316Z","iopub.execute_input":"2024-04-22T00:52:51.687613Z","iopub.status.idle":"2024-04-22T00:52:51.961449Z","shell.execute_reply.started":"2024-04-22T00:52:51.687588Z","shell.execute_reply":"2024-04-22T00:52:51.960544Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train[10]","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:52:51.962504Z","iopub.execute_input":"2024-04-22T00:52:51.962783Z","iopub.status.idle":"2024-04-22T00:52:51.971487Z","shell.execute_reply.started":"2024-04-22T00:52:51.962758Z","shell.execute_reply":"2024-04-22T00:52:51.970172Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Preparing the Test Data","metadata":{}},{"cell_type":"code","source":"categories = ['damage', 'no_damage']\n\n# Now we get the images using complete path and store the images into img_data folder.\nimg_data = []\nfor cata in categories:\n    folder = os.path.join(test_dir, cata)\n    label = categories.index(cata)\n    for img in os.listdir(folder):\n        img_path = os.path.join(folder, img)\n\n        try:\n            # Attempt to read and resize the image\n            img_array = cv2.imread(img_path)\n            img_array = cv2.resize(img_array, (img_height, img_width))\n\n            # Check if the image array is not empty\n            if img_array is not None and not img_array.size == 0:\n                img_data.append([img_array, label])\n\n        except Exception as e:\n            continue","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:52:51.973019Z","iopub.execute_input":"2024-04-22T00:52:51.973419Z","iopub.status.idle":"2024-04-22T00:53:06.966564Z","shell.execute_reply.started":"2024-04-22T00:52:51.973375Z","shell.execute_reply":"2024-04-22T00:53:06.965654Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"random.shuffle(img_data)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:06.967611Z","iopub.execute_input":"2024-04-22T00:53:06.967879Z","iopub.status.idle":"2024-04-22T00:53:06.974073Z","shell.execute_reply.started":"2024-04-22T00:53:06.967855Z","shell.execute_reply":"2024-04-22T00:53:06.973129Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x=[]\ny=[]\nfor features,labels in img_data:\n    x.append(features)\n    y.append(labels)\n    \n#Convert X and Y list into array\nx_test = np.array(x, dtype = float)\ny_test = np.array(y)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:06.975414Z","iopub.execute_input":"2024-04-22T00:53:06.975901Z","iopub.status.idle":"2024-04-22T00:53:07.117229Z","shell.execute_reply.started":"2024-04-22T00:53:06.975865Z","shell.execute_reply":"2024-04-22T00:53:07.116102Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Normalizing the values","metadata":{}},{"cell_type":"code","source":"for i in range(len(x_test)):\n    x_test[i] /= 255","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:07.118488Z","iopub.execute_input":"2024-04-22T00:53:07.118803Z","iopub.status.idle":"2024-04-22T00:53:07.182305Z","shell.execute_reply.started":"2024-04-22T00:53:07.118760Z","shell.execute_reply":"2024-04-22T00:53:07.181588Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Preparing the Validation Data","metadata":{}},{"cell_type":"code","source":"categories = ['damage', 'no_damage']\n\n# Now we get the images using complete path and store the images into img_data folder.\nimg_data = []\nfor cata in categories:\n    folder = os.path.join(val_dir, cata)\n    label = categories.index(cata)\n    for img in os.listdir(folder):\n        img_path = os.path.join(folder, img)\n\n        try:\n            # Attempt to read and resize the image\n            img_array = cv2.imread(img_path)\n            img_array = cv2.resize(img_array, (img_height, img_width))\n\n            # Check if the image array is not empty\n            if img_array is not None and not img_array.size == 0:\n                img_data.append([img_array, label])\n\n        except Exception as e:\n            continue","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:07.183309Z","iopub.execute_input":"2024-04-22T00:53:07.183580Z","iopub.status.idle":"2024-04-22T00:53:21.560704Z","shell.execute_reply.started":"2024-04-22T00:53:07.183556Z","shell.execute_reply":"2024-04-22T00:53:21.559852Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"random.shuffle(img_data)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:21.561818Z","iopub.execute_input":"2024-04-22T00:53:21.562192Z","iopub.status.idle":"2024-04-22T00:53:21.568842Z","shell.execute_reply.started":"2024-04-22T00:53:21.562159Z","shell.execute_reply":"2024-04-22T00:53:21.567921Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x=[]\ny=[]\nfor features,labels in img_data:\n    x.append(features)\n    y.append(labels)\n    \n#Convert X and Y list into array\nx_val = np.array(x, dtype = float)\ny_val = np.array(y)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:21.569996Z","iopub.execute_input":"2024-04-22T00:53:21.570324Z","iopub.status.idle":"2024-04-22T00:53:21.703894Z","shell.execute_reply.started":"2024-04-22T00:53:21.570292Z","shell.execute_reply":"2024-04-22T00:53:21.703096Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Normalizing the values","metadata":{}},{"cell_type":"code","source":"for i in range(len(x_val)):\n    x_val[i] /= 255","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:21.705232Z","iopub.execute_input":"2024-04-22T00:53:21.705612Z","iopub.status.idle":"2024-04-22T00:53:21.770680Z","shell.execute_reply.started":"2024-04-22T00:53:21.705578Z","shell.execute_reply":"2024-04-22T00:53:21.769684Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Modeling the CNN","metadata":{}},{"cell_type":"code","source":"model = Sequential()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:21.771932Z","iopub.execute_input":"2024-04-22T00:53:21.772252Z","iopub.status.idle":"2024-04-22T00:53:21.780907Z","shell.execute_reply.started":"2024-04-22T00:53:21.772224Z","shell.execute_reply":"2024-04-22T00:53:21.779934Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.add(Conv2D(256, kernel_size = (3,3), padding = 'same', activation = 'relu', input_shape = x_train.shape[1:]))\nmodel.add(AveragePooling2D(2,2))\nmodel.add(Conv2D(256, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(Conv2D(256, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Conv2D(128, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(Conv2D(128, kernel_size = (3,3), padding = 'same', activation = 'relu'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Flatten())\nmodel.add(Dense(3500, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2000, activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation = 'sigmoid'))","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:21.782213Z","iopub.execute_input":"2024-04-22T00:53:21.783020Z","iopub.status.idle":"2024-04-22T00:53:23.016086Z","shell.execute_reply.started":"2024-04-22T00:53:21.782979Z","shell.execute_reply":"2024-04-22T00:53:23.015153Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:23.017350Z","iopub.execute_input":"2024-04-22T00:53:23.017653Z","iopub.status.idle":"2024-04-22T00:53:23.031076Z","shell.execute_reply.started":"2024-04-22T00:53:23.017626Z","shell.execute_reply":"2024-04-22T00:53:23.030151Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:23.038090Z","iopub.execute_input":"2024-04-22T00:53:23.038536Z","iopub.status.idle":"2024-04-22T00:53:23.068602Z","shell.execute_reply.started":"2024-04-22T00:53:23.038511Z","shell.execute_reply":"2024-04-22T00:53:23.067688Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_model(model, to_file = 'Model Image.png', show_shapes = True, show_layer_activations = True)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:23.069589Z","iopub.execute_input":"2024-04-22T00:53:23.069841Z","iopub.status.idle":"2024-04-22T00:53:23.786874Z","shell.execute_reply.started":"2024-04-22T00:53:23.069818Z","shell.execute_reply":"2024-04-22T00:53:23.786001Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"![image.png](attachment:29866e6f-6dd8-4f5c-b523-c8747643c3b2.png)","metadata":{},"attachments":{"29866e6f-6dd8-4f5c-b523-c8747643c3b2.png":{"image/png":"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aK+595PLhZ6wHlttFwECBAgQIECAAAECBEZLQOvRerSeUWg99//FikXzqt880N239TijZ7SOg16XAAECBAgQIECAAAECYRLQerQerWekW8//ebprTvPEr95+ktATpoOpbSFAgAABAgQIECBAgECRCGg9Wo/WM9KtZ89/W7x2ab3QUyQHQatBgAABAgQIECBAgACBkAloPVqP1jOirefVp7ZPm1p+8PPreluPX90K2VHV5hAgQIAAAQIECBAgQGB0BbQerUfrGdHWs3tnZ3x9s9Azugc+r06AAAECBAgQIECAAIEQC2g9Wo/WM3Kt539+7cypVaUvPHx6T+txRk+Ij602jQABAgQIECBAgAABAqMloPVoPeFoPWuvv3zpsZfe3pah377+8pFrPX92Vtv7u+YIPaN1vPO6BAgQIECAAAECBAgQiIKA1qP1vN1HVi9q2LNrce+vF+V44+XHNo+vryr9yYN5mcZd0RVbc3zse3cMMH13z6yT2grReo4c7N60uilfS37xS5umTC49/PiWZCLujJ4oHF5tIwECBAgQIECAAAECBEZFQOvRegLeer67J/aetR3ttfkqMr2FqyfHnNA5LV9LPvu0GddeNF/oGZUjnRclQIAAAQIECBAgQIBAdAS0Hq0nyK3nv0JP/dz6j5w/P19FJuUXrD529aV5WfIz96yvn1L2b9/a5oye6BxebSkBAgQIECBAgAABAgRGRUDr0XoC23r+FHp++sTWj75vQV6KTEro+fWvf3397g/lZckbVjTcduUioWdUDnNelAABAgQIECBAgAABApES0Hq0nmC2nj6hJ5mI57H1pOSYvLSer99xcktT5ev7dlxxztzFC1p+n5AidZSxsQQIECBAgAABAgQIECAwkgJaj9YTwNbzztCTx9aTEnp+PxRzbz1HDnYv6ai55xPLhZ6RPLR5LQIECBAgQIAAAQIECERWQOvReoLWevqFnny1nv6h5/fHhdxbzwPXr1w0r/qDZ7c5oyeyx1kbToAAAQIECBAgQIAAgZEU0Hq0nkC1noFCT15az4Ch5/dDMcfWs/mk6XOaJ24/dbrQM5LHNa9FgAABAgQIECBAgACBKAtoPVpPcFrPqcfF3rO2fm79T5/Y2vuX0Xtu5Hy9numD/YJVjq1nYVv1jIYJQk+UD7K2nQABAgQIECBAgAABAiMsoPVoPQVsPePq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"}}},{"cell_type":"code","source":"history = model.fit(x_train, y_train, validation_data = (x_val, y_val), epochs = 5)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:53:23.788495Z","iopub.execute_input":"2024-04-22T00:53:23.788785Z","iopub.status.idle":"2024-04-22T00:59:11.067016Z","shell.execute_reply.started":"2024-04-22T00:53:23.788759Z","shell.execute_reply":"2024-04-22T00:59:11.066172Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.evaluate(x_test, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:59:11.068543Z","iopub.execute_input":"2024-04-22T00:59:11.068882Z","iopub.status.idle":"2024-04-22T00:59:13.605880Z","shell.execute_reply.started":"2024-04-22T00:59:11.068849Z","shell.execute_reply":"2024-04-22T00:59:13.604936Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.plot(history.history['accuracy'], label = 'Train Accuracy')\nplt.plot(history.history['val_accuracy'], label = 'Val Accuracy')\nplt.grid()\nplt.legend(loc = 'best')","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:59:13.607183Z","iopub.execute_input":"2024-04-22T00:59:13.607605Z","iopub.status.idle":"2024-04-22T00:59:13.963614Z","shell.execute_reply.started":"2024-04-22T00:59:13.607555Z","shell.execute_reply":"2024-04-22T00:59:13.962657Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.plot(history.history['loss'], label = 'Train Loss')\nplt.plot(history.history['val_loss'], label = 'Val Loss')\nplt.grid()\nplt.legend(loc = 'best')","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:59:13.966471Z","iopub.execute_input":"2024-04-22T00:59:13.966789Z","iopub.status.idle":"2024-04-22T00:59:14.250354Z","shell.execute_reply.started":"2024-04-22T00:59:13.966760Z","shell.execute_reply":"2024-04-22T00:59:14.249535Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix\n\n# Define ground truth labels and model predictions\nground_truth = np.array([1, 0, 1, 0, 1])  # Example ground truth labels (1 for damaged, 0 for undamaged)\npredictions = np.array([1, 0, 1, 1, 0])    # Example model predictions\n\n# Calculate evaluation metrics\naccuracy = accuracy_score(ground_truth, predictions)\nprecision = precision_score(ground_truth, predictions)\nrecall = recall_score(ground_truth, predictions)\nf1 = f1_score(ground_truth, predictions)\nauc = roc_auc_score(ground_truth, predictions)\nconf_matrix = confusion_matrix(ground_truth, predictions)\n\n# Print evaluation metrics\nprint(\"Accuracy:\", accuracy)\nprint(\"Precision:\", precision)\nprint(\"Recall:\", recall)\nprint(\"F1 Score:\", f1)\nprint(\"AUC Score:\", auc)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:59:14.251414Z","iopub.execute_input":"2024-04-22T00:59:14.251712Z","iopub.status.idle":"2024-04-22T00:59:14.287365Z","shell.execute_reply.started":"2024-04-22T00:59:14.251685Z","shell.execute_reply":"2024-04-22T00:59:14.286506Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, AveragePooling2D, Flatten, Dense, Dropout\nfrom keras.optimizers import Adam\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom keras.regularizers import l2\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n\n# Define data augmentation parameters\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True,\n    fill_mode='nearest'\n)\n\n# Define the model\nmodel = Sequential()\nmodel.add(Conv2D(256, kernel_size=(3, 3), padding='same', activation='relu', input_shape=x_train.shape[1:]))\nmodel.add(AveragePooling2D(2, 2))\nmodel.add(Conv2D(256, kernel_size=(3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(256, kernel_size=(3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(2, 2))\nmodel.add(Conv2D(128, kernel_size=(3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(128, kernel_size=(3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(2, 2))\nmodel.add(Flatten())\nmodel.add(Dense(3500, activation='relu', kernel_regularizer=l2(0.001)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2000, activation='relu', kernel_regularizer=l2(0.001)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\noptimizer = Adam(learning_rate=0.001)\nmodel.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n\n\n# Define callbacks\nearly_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.00001)\n\n# Train the model\nhistory = model.fit(datagen.flow(x_train, y_train, batch_size=32),\n                    validation_data=(x_val, y_val),\n                    epochs=5,\n                    callbacks=[early_stopping, reduce_lr])\n\n# Evaluate the model\ntest_loss, test_accuracy = model.evaluate(x_test, y_test)\nprint(\"Test Accuracy:\", test_accuracy)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-22T00:59:14.288408Z","iopub.execute_input":"2024-04-22T00:59:14.288679Z","iopub.status.idle":"2024-04-22T01:05:08.193886Z","shell.execute_reply.started":"2024-04-22T00:59:14.288655Z","shell.execute_reply":"2024-04-22T01:05:08.192978Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Define image data generators with rescaling\ndatagen = ImageDataGenerator(rescale=1./255)\n\n# Define batch size\nbatch_size = 32\n\n# Load and preprocess training data\ntrain_generator = datagen.flow_from_directory(\n    train_another_dir,\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    class_mode='binary'\n)\n\n# Load and preprocess validation data\nval_generator = datagen.flow_from_directory(\n    val_dir,\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    class_mode='binary'\n)\n\n# Load and preprocess test data\ntest_generator = datagen.flow_from_directory(\n    test_another_dir,\n    target_size=(img_width, img_height),\n    batch_size=batch_size,\n    class_mode='binary'\n)\n\nmodel = Sequential([\n    Conv2D(32, (3, 3), activation='relu', input_shape=(img_width, img_height, 3)),\n    MaxPooling2D((2, 2)),\n    Conv2D(64, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n    Conv2D(128, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dropout(0.5),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nhistory = model.fit(\n    train_generator,\n    epochs=15,\n    validation_data=val_generator,\n    callbacks=[early_stopping, reduce_lr]\n)\n\n# Evaluate the model on the test data\ntest_loss, test_accuracy = model.evaluate(test_generator)\nprint(\"Test Accuracy:\", test_accuracy)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-22T01:20:47.476587Z","iopub.execute_input":"2024-04-22T01:20:47.477001Z","iopub.status.idle":"2024-04-22T01:26:45.157160Z","shell.execute_reply.started":"2024-04-22T01:20:47.476970Z","shell.execute_reply":"2024-04-22T01:26:45.156285Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Plot training and validation accuracy\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.legend()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-22T01:27:49.482384Z","iopub.execute_input":"2024-04-22T01:27:49.483225Z","iopub.status.idle":"2024-04-22T01:27:49.782944Z","shell.execute_reply.started":"2024-04-22T01:27:49.483189Z","shell.execute_reply":"2024-04-22T01:27:49.781973Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\n# Plot accuracy\nplt.figure(figsize=(10, 8))\nplt.plot(range(1, len(acc) + 1), acc, '+-', label='Training Accuracy')\nplt.plot(range(1, len(val_acc) + 1), val_acc, '+-', label='Validation Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.legend()\nplt.grid(ls='--', c='C7')\nplt.ylim(0.5, 1)  # Adjust the y-axis limits if needed\nplt.show()\n\n# Plot loss\nplt.figure(figsize=(10, 8))\nplt.plot(range(1, len(loss) + 1), loss, '+-', label='Training Loss')\nplt.plot(range(1, len(val_loss) + 1), val_loss, '+-', label='Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss')\nplt.legend()\nplt.grid(ls='--', c='C7')\nplt.ylim(0, 1)  # Adjust the y-axis limits if needed\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T01:30:06.276058Z","iopub.execute_input":"2024-04-22T01:30:06.276452Z","iopub.status.idle":"2024-04-22T01:30:06.931349Z","shell.execute_reply.started":"2024-04-22T01:30:06.276418Z","shell.execute_reply":"2024-04-22T01:30:06.930324Z"},"trusted":true},"execution_count":null,"outputs":[]}]}